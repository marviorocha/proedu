{"ast":null,"code":"/*!\n * JQVMap: jQuery Vector Map Library\n * @author JQVMap <me@peterschmalfeldt.com>\n * @version 1.5.1\n * @link http://jqvmap.com\n * @license https://github.com/manifestinteractive/jqvmap/blob/master/LICENSE\n * @builddate 2016/06/02\n */\nvar VectorCanvas = function VectorCanvas(width, height, params) {\n  this.mode = window.SVGAngle ? 'svg' : 'vml';\n  this.params = params;\n\n  if (this.mode === 'svg') {\n    this.createSvgNode = function (nodeName) {\n      return document.createElementNS(this.svgns, nodeName);\n    };\n  } else {\n    try {\n      if (!document.namespaces.rvml) {\n        document.namespaces.add('rvml', 'urn:schemas-microsoft-com:vml');\n      }\n\n      this.createVmlNode = function (tagName) {\n        return document.createElement('<rvml:' + tagName + ' class=\"rvml\">');\n      };\n    } catch (e) {\n      this.createVmlNode = function (tagName) {\n        return document.createElement('<' + tagName + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n      };\n    }\n\n    document.createStyleSheet().addRule('.rvml', 'behavior:url(#default#VML)');\n  }\n\n  if (this.mode === 'svg') {\n    this.canvas = this.createSvgNode('svg');\n  } else {\n    this.canvas = this.createVmlNode('group');\n    this.canvas.style.position = 'absolute';\n  }\n\n  this.setSize(width, height);\n};\n\nVectorCanvas.prototype = {\n  svgns: 'http://www.w3.org/2000/svg',\n  mode: 'svg',\n  width: 0,\n  height: 0,\n  canvas: null\n};\n\nvar ColorScale = function ColorScale(colors, normalizeFunction, minValue, maxValue) {\n  if (colors) {\n    this.setColors(colors);\n  }\n\n  if (normalizeFunction) {\n    this.setNormalizeFunction(normalizeFunction);\n  }\n\n  if (minValue) {\n    this.setMin(minValue);\n  }\n\n  if (minValue) {\n    this.setMax(maxValue);\n  }\n};\n\nColorScale.prototype = {\n  colors: []\n};\n\nvar JQVMap = function JQVMap(params) {\n  params = params || {};\n  var map = this;\n  var mapData = JQVMap.maps[params.map];\n  var mapPins;\n\n  if (!mapData) {\n    throw new Error('Invalid \"' + params.map + '\" map parameter. Please make sure you have loaded this map file in your HTML.');\n  }\n\n  this.selectedRegions = [];\n  this.multiSelectRegion = params.multiSelectRegion;\n  this.container = params.container;\n  this.defaultWidth = mapData.width;\n  this.defaultHeight = mapData.height;\n  this.color = params.color;\n  this.selectedColor = params.selectedColor;\n  this.hoverColor = params.hoverColor;\n  this.hoverColors = params.hoverColors;\n  this.hoverOpacity = params.hoverOpacity;\n  this.setBackgroundColor(params.backgroundColor);\n  this.width = params.container.width();\n  this.height = params.container.height();\n  this.resize();\n  jQuery(window).resize(function () {\n    var newWidth = params.container.width();\n    var newHeight = params.container.height();\n\n    if (newWidth && newHeight) {\n      map.width = newWidth;\n      map.height = newHeight;\n      map.resize();\n      map.canvas.setSize(map.width, map.height);\n      map.applyTransform();\n      var resizeEvent = jQuery.Event('resize.jqvmap');\n      jQuery(params.container).trigger(resizeEvent, [newWidth, newHeight]);\n\n      if (mapPins) {\n        jQuery('.jqvmap-pin').remove();\n        map.pinHandlers = false;\n        map.placePins(mapPins.pins, mapPins.mode);\n      }\n    }\n  });\n  this.canvas = new VectorCanvas(this.width, this.height, params);\n  params.container.append(this.canvas.canvas);\n  this.makeDraggable();\n  this.rootGroup = this.canvas.createGroup(true);\n  this.index = JQVMap.mapIndex;\n  this.label = jQuery('<div/>').addClass('jqvmap-label').appendTo(jQuery('body')).hide();\n\n  if (params.enableZoom) {\n    jQuery('<div/>').addClass('jqvmap-zoomin').text('+').appendTo(params.container);\n    jQuery('<div/>').addClass('jqvmap-zoomout').html('&#x2212;').appendTo(params.container);\n  }\n\n  map.countries = [];\n\n  for (var key in mapData.paths) {\n    var path = this.canvas.createPath({\n      path: mapData.paths[key].path\n    });\n    path.setFill(this.color);\n    path.id = map.getCountryId(key);\n    map.countries[key] = path;\n\n    if (this.canvas.mode === 'svg') {\n      path.setAttribute('class', 'jqvmap-region');\n    } else {\n      jQuery(path).addClass('jqvmap-region');\n    }\n\n    jQuery(this.rootGroup).append(path);\n  }\n\n  jQuery(params.container).delegate(this.canvas.mode === 'svg' ? 'path' : 'shape', 'mouseover mouseout', function (e) {\n    var containerPath = e.target,\n        code = e.target.id.split('_').pop(),\n        labelShowEvent = jQuery.Event('labelShow.jqvmap'),\n        regionMouseOverEvent = jQuery.Event('regionMouseOver.jqvmap');\n    code = code.toLowerCase();\n\n    if (e.type === 'mouseover') {\n      jQuery(params.container).trigger(regionMouseOverEvent, [code, mapData.paths[code].name]);\n\n      if (!regionMouseOverEvent.isDefaultPrevented()) {\n        map.highlight(code, containerPath);\n      }\n\n      if (params.showTooltip) {\n        map.label.text(mapData.paths[code].name);\n        jQuery(params.container).trigger(labelShowEvent, [map.label, code]);\n\n        if (!labelShowEvent.isDefaultPrevented()) {\n          map.label.show();\n          map.labelWidth = map.label.width();\n          map.labelHeight = map.label.height();\n        }\n      }\n    } else {\n      map.unhighlight(code, containerPath);\n      map.label.hide();\n      jQuery(params.container).trigger('regionMouseOut.jqvmap', [code, mapData.paths[code].name]);\n    }\n  });\n  jQuery(params.container).delegate(this.canvas.mode === 'svg' ? 'path' : 'shape', 'click', function (regionClickEvent) {\n    var targetPath = regionClickEvent.target;\n    var code = regionClickEvent.target.id.split('_').pop();\n    var mapClickEvent = jQuery.Event('regionClick.jqvmap');\n    code = code.toLowerCase();\n    jQuery(params.container).trigger(mapClickEvent, [code, mapData.paths[code].name]);\n\n    if (!params.multiSelectRegion && !mapClickEvent.isDefaultPrevented()) {\n      for (var keyPath in mapData.paths) {\n        map.countries[keyPath].currentFillColor = map.countries[keyPath].getOriginalFill();\n        map.countries[keyPath].setFill(map.countries[keyPath].getOriginalFill());\n      }\n    }\n\n    if (!mapClickEvent.isDefaultPrevented()) {\n      if (map.isSelected(code)) {\n        map.deselect(code, targetPath);\n      } else {\n        map.select(code, targetPath);\n      }\n    }\n  });\n\n  if (params.showTooltip) {\n    params.container.mousemove(function (e) {\n      if (map.label.is(':visible')) {\n        var left = e.pageX - 15 - map.labelWidth;\n        var top = e.pageY - 15 - map.labelHeight;\n\n        if (left < 0) {\n          left = e.pageX + 15;\n        }\n\n        if (top < 0) {\n          top = e.pageY + 15;\n        }\n\n        map.label.css({\n          left: left,\n          top: top\n        });\n      }\n    });\n  }\n\n  this.setColors(params.colors);\n  this.canvas.canvas.appendChild(this.rootGroup);\n  this.applyTransform();\n  this.colorScale = new ColorScale(params.scaleColors, params.normalizeFunction, params.valueMin, params.valueMax);\n\n  if (params.values) {\n    this.values = params.values;\n    this.setValues(params.values);\n  }\n\n  if (params.selectedRegions) {\n    if (params.selectedRegions instanceof Array) {\n      for (var k in params.selectedRegions) {\n        this.select(params.selectedRegions[k].toLowerCase());\n      }\n    } else {\n      this.select(params.selectedRegions.toLowerCase());\n    }\n  }\n\n  this.bindZoomButtons();\n\n  if (params.pins) {\n    mapPins = {\n      pins: params.pins,\n      mode: params.pinMode\n    };\n    this.pinHandlers = false;\n    this.placePins(params.pins, params.pinMode);\n  }\n\n  if (params.showLabels) {\n    this.pinHandlers = false;\n    var pins = {};\n\n    for (key in map.countries) {\n      if (typeof map.countries[key] !== 'function') {\n        if (!params.pins || !params.pins[key]) {\n          pins[key] = key.toUpperCase();\n        }\n      }\n    }\n\n    mapPins = {\n      pins: pins,\n      mode: 'content'\n    };\n    this.placePins(pins, 'content');\n  }\n\n  JQVMap.mapIndex++;\n};\n\nJQVMap.prototype = {\n  transX: 0,\n  transY: 0,\n  scale: 1,\n  baseTransX: 0,\n  baseTransY: 0,\n  baseScale: 1,\n  width: 0,\n  height: 0,\n  countries: {},\n  countriesColors: {},\n  countriesData: {},\n  zoomStep: 1.4,\n  zoomMaxStep: 4,\n  zoomCurStep: 1\n};\nJQVMap.xlink = 'http://www.w3.org/1999/xlink';\nJQVMap.mapIndex = 1;\nJQVMap.maps = {};\n\n(function () {\n  var apiParams = {\n    colors: 1,\n    values: 1,\n    backgroundColor: 1,\n    scaleColors: 1,\n    normalizeFunction: 1,\n    enableZoom: 1,\n    showTooltip: 1,\n    borderColor: 1,\n    borderWidth: 1,\n    borderOpacity: 1,\n    selectedRegions: 1,\n    multiSelectRegion: 1\n  };\n  var apiEvents = {\n    onLabelShow: 'labelShow',\n    onLoad: 'load',\n    onRegionOver: 'regionMouseOver',\n    onRegionOut: 'regionMouseOut',\n    onRegionClick: 'regionClick',\n    onRegionSelect: 'regionSelect',\n    onRegionDeselect: 'regionDeselect',\n    onResize: 'resize'\n  };\n\n  jQuery.fn.vectorMap = function (options) {\n    var defaultParams = {\n      map: 'world_en',\n      backgroundColor: '#a5bfdd',\n      color: '#f4f3f0',\n      hoverColor: '#c9dfaf',\n      hoverColors: {},\n      selectedColor: '#c9dfaf',\n      scaleColors: ['#b6d6ff', '#005ace'],\n      normalizeFunction: 'linear',\n      enableZoom: true,\n      showTooltip: true,\n      borderColor: '#818181',\n      borderWidth: 1,\n      borderOpacity: 0.25,\n      selectedRegions: null,\n      multiSelectRegion: false\n    },\n        map = this.data('mapObject');\n\n    if (options === 'addMap') {\n      JQVMap.maps[arguments[1]] = arguments[2];\n    } else if (options === 'set' && apiParams[arguments[1]]) {\n      map['set' + arguments[1].charAt(0).toUpperCase() + arguments[1].substr(1)].apply(map, Array.prototype.slice.call(arguments, 2));\n    } else if (typeof options === 'string' && typeof map[options] === 'function') {\n      return map[options].apply(map, Array.prototype.slice.call(arguments, 1));\n    } else {\n      jQuery.extend(defaultParams, options);\n      defaultParams.container = this;\n      this.css({\n        position: 'relative',\n        overflow: 'hidden'\n      });\n      map = new JQVMap(defaultParams);\n      this.data('mapObject', map);\n      this.unbind('.jqvmap');\n\n      for (var e in apiEvents) {\n        if (defaultParams[e]) {\n          this.bind(apiEvents[e] + '.jqvmap', defaultParams[e]);\n        }\n      }\n\n      var loadEvent = jQuery.Event('load.jqvmap');\n      jQuery(defaultParams.container).trigger(loadEvent, map);\n      return map;\n    }\n  };\n})(jQuery);\n\nColorScale.arrayToRgb = function (ar) {\n  var rgb = '#';\n  var d;\n\n  for (var i = 0; i < ar.length; i++) {\n    d = ar[i].toString(16);\n    rgb += d.length === 1 ? '0' + d : d;\n  }\n\n  return rgb;\n};\n\nColorScale.prototype.getColor = function (value) {\n  if (typeof this.normalize === 'function') {\n    value = this.normalize(value);\n  }\n\n  var lengthes = [];\n  var fullLength = 0;\n  var l;\n\n  for (var i = 0; i < this.colors.length - 1; i++) {\n    l = this.vectorLength(this.vectorSubtract(this.colors[i + 1], this.colors[i]));\n    lengthes.push(l);\n    fullLength += l;\n  }\n\n  var c = (this.maxValue - this.minValue) / fullLength;\n\n  for (i = 0; i < lengthes.length; i++) {\n    lengthes[i] *= c;\n  }\n\n  i = 0;\n  value -= this.minValue;\n\n  while (value - lengthes[i] >= 0) {\n    value -= lengthes[i];\n    i++;\n  }\n\n  var color;\n\n  if (i === this.colors.length - 1) {\n    color = this.vectorToNum(this.colors[i]).toString(16);\n  } else {\n    color = this.vectorToNum(this.vectorAdd(this.colors[i], this.vectorMult(this.vectorSubtract(this.colors[i + 1], this.colors[i]), value / lengthes[i]))).toString(16);\n  }\n\n  while (color.length < 6) {\n    color = '0' + color;\n  }\n\n  return '#' + color;\n};\n\nColorScale.rgbToArray = function (rgb) {\n  rgb = rgb.substr(1);\n  return [parseInt(rgb.substr(0, 2), 16), parseInt(rgb.substr(2, 2), 16), parseInt(rgb.substr(4, 2), 16)];\n};\n\nColorScale.prototype.setColors = function (colors) {\n  for (var i = 0; i < colors.length; i++) {\n    colors[i] = ColorScale.rgbToArray(colors[i]);\n  }\n\n  this.colors = colors;\n};\n\nColorScale.prototype.setMax = function (max) {\n  this.clearMaxValue = max;\n\n  if (typeof this.normalize === 'function') {\n    this.maxValue = this.normalize(max);\n  } else {\n    this.maxValue = max;\n  }\n};\n\nColorScale.prototype.setMin = function (min) {\n  this.clearMinValue = min;\n\n  if (typeof this.normalize === 'function') {\n    this.minValue = this.normalize(min);\n  } else {\n    this.minValue = min;\n  }\n};\n\nColorScale.prototype.setNormalizeFunction = function (f) {\n  if (f === 'polynomial') {\n    this.normalize = function (value) {\n      return Math.pow(value, 0.2);\n    };\n  } else if (f === 'linear') {\n    delete this.normalize;\n  } else {\n    this.normalize = f;\n  }\n\n  this.setMin(this.clearMinValue);\n  this.setMax(this.clearMaxValue);\n};\n\nColorScale.prototype.vectorAdd = function (vector1, vector2) {\n  var vector = [];\n\n  for (var i = 0; i < vector1.length; i++) {\n    vector[i] = vector1[i] + vector2[i];\n  }\n\n  return vector;\n};\n\nColorScale.prototype.vectorLength = function (vector) {\n  var result = 0;\n\n  for (var i = 0; i < vector.length; i++) {\n    result += vector[i] * vector[i];\n  }\n\n  return Math.sqrt(result);\n};\n\nColorScale.prototype.vectorMult = function (vector, num) {\n  var result = [];\n\n  for (var i = 0; i < vector.length; i++) {\n    result[i] = vector[i] * num;\n  }\n\n  return result;\n};\n\nColorScale.prototype.vectorSubtract = function (vector1, vector2) {\n  var vector = [];\n\n  for (var i = 0; i < vector1.length; i++) {\n    vector[i] = vector1[i] - vector2[i];\n  }\n\n  return vector;\n};\n\nColorScale.prototype.vectorToNum = function (vector) {\n  var num = 0;\n\n  for (var i = 0; i < vector.length; i++) {\n    num += Math.round(vector[i]) * Math.pow(256, vector.length - i - 1);\n  }\n\n  return num;\n};\n\nJQVMap.prototype.applyTransform = function () {\n  var maxTransX, maxTransY, minTransX, minTransY;\n\n  if (this.defaultWidth * this.scale <= this.width) {\n    maxTransX = (this.width - this.defaultWidth * this.scale) / (2 * this.scale);\n    minTransX = (this.width - this.defaultWidth * this.scale) / (2 * this.scale);\n  } else {\n    maxTransX = 0;\n    minTransX = (this.width - this.defaultWidth * this.scale) / this.scale;\n  }\n\n  if (this.defaultHeight * this.scale <= this.height) {\n    maxTransY = (this.height - this.defaultHeight * this.scale) / (2 * this.scale);\n    minTransY = (this.height - this.defaultHeight * this.scale) / (2 * this.scale);\n  } else {\n    maxTransY = 0;\n    minTransY = (this.height - this.defaultHeight * this.scale) / this.scale;\n  }\n\n  if (this.transY > maxTransY) {\n    this.transY = maxTransY;\n  } else if (this.transY < minTransY) {\n    this.transY = minTransY;\n  }\n\n  if (this.transX > maxTransX) {\n    this.transX = maxTransX;\n  } else if (this.transX < minTransX) {\n    this.transX = minTransX;\n  }\n\n  this.canvas.applyTransformParams(this.scale, this.transX, this.transY);\n};\n\nJQVMap.prototype.bindZoomButtons = function () {\n  var map = this;\n  this.container.find('.jqvmap-zoomin').click(function () {\n    map.zoomIn();\n  });\n  this.container.find('.jqvmap-zoomout').click(function () {\n    map.zoomOut();\n  });\n};\n\nJQVMap.prototype.deselect = function (cc, path) {\n  cc = cc.toLowerCase();\n  path = path || jQuery('#' + this.getCountryId(cc))[0];\n\n  if (this.isSelected(cc)) {\n    this.selectedRegions.splice(this.selectIndex(cc), 1);\n    jQuery(this.container).trigger('regionDeselect.jqvmap', [cc]);\n    path.currentFillColor = path.getOriginalFill();\n    path.setFill(path.getOriginalFill());\n  } else {\n    for (var key in this.countries) {\n      this.selectedRegions.splice(this.selectedRegions.indexOf(key), 1);\n      this.countries[key].currentFillColor = this.color;\n      this.countries[key].setFill(this.color);\n    }\n  }\n};\n\nJQVMap.prototype.getCountryId = function (cc) {\n  return 'jqvmap' + this.index + '_' + cc;\n};\n\nJQVMap.prototype.getPin = function (cc) {\n  var pinObj = jQuery('#' + this.getPinId(cc));\n  return pinObj.html();\n};\n\nJQVMap.prototype.getPinId = function (cc) {\n  return this.getCountryId(cc) + '_pin';\n};\n\nJQVMap.prototype.getPins = function () {\n  var pins = this.container.find('.jqvmap-pin');\n  var ret = {};\n  jQuery.each(pins, function (index, pinObj) {\n    pinObj = jQuery(pinObj);\n    var cc = pinObj.attr('for').toLowerCase();\n    var pinContent = pinObj.html();\n    ret[cc] = pinContent;\n  });\n  return JSON.stringify(ret);\n};\n\nJQVMap.prototype.highlight = function (cc, path) {\n  path = path || jQuery('#' + this.getCountryId(cc))[0];\n\n  if (this.hoverOpacity) {\n    path.setOpacity(this.hoverOpacity);\n  } else if (this.hoverColors && cc in this.hoverColors) {\n    path.currentFillColor = path.getFill() + '';\n    path.setFill(this.hoverColors[cc]);\n  } else if (this.hoverColor) {\n    path.currentFillColor = path.getFill() + '';\n    path.setFill(this.hoverColor);\n  }\n};\n\nJQVMap.prototype.isSelected = function (cc) {\n  return this.selectIndex(cc) >= 0;\n};\n\nJQVMap.prototype.makeDraggable = function () {\n  var mouseDown = false;\n  var oldPageX, oldPageY;\n  var self = this;\n  self.isMoving = false;\n  self.isMovingTimeout = false;\n  var lastTouchCount;\n  var touchCenterX;\n  var touchCenterY;\n  var touchStartDistance;\n  var touchStartScale;\n  var touchX;\n  var touchY;\n  this.container.mousemove(function (e) {\n    if (mouseDown) {\n      self.transX -= (oldPageX - e.pageX) / self.scale;\n      self.transY -= (oldPageY - e.pageY) / self.scale;\n      self.applyTransform();\n      oldPageX = e.pageX;\n      oldPageY = e.pageY;\n      self.isMoving = true;\n\n      if (self.isMovingTimeout) {\n        clearTimeout(self.isMovingTimeout);\n      }\n\n      self.container.trigger('drag');\n    }\n\n    return false;\n  }).mousedown(function (e) {\n    mouseDown = true;\n    oldPageX = e.pageX;\n    oldPageY = e.pageY;\n    return false;\n  }).mouseup(function () {\n    mouseDown = false;\n    clearTimeout(self.isMovingTimeout);\n    self.isMovingTimeout = setTimeout(function () {\n      self.isMoving = false;\n    }, 100);\n    return false;\n  }).mouseout(function () {\n    if (mouseDown && self.isMoving) {\n      clearTimeout(self.isMovingTimeout);\n      self.isMovingTimeout = setTimeout(function () {\n        mouseDown = false;\n        self.isMoving = false;\n      }, 100);\n      return false;\n    }\n  });\n  jQuery(this.container).bind('touchmove', function (e) {\n    var offset;\n    var scale;\n    var touches = e.originalEvent.touches;\n    var transformXOld;\n    var transformYOld;\n\n    if (touches.length === 1) {\n      if (lastTouchCount === 1) {\n        if (touchX === touches[0].pageX && touchY === touches[0].pageY) {\n          return;\n        }\n\n        transformXOld = self.transX;\n        transformYOld = self.transY;\n        self.transX -= (touchX - touches[0].pageX) / self.scale;\n        self.transY -= (touchY - touches[0].pageY) / self.scale;\n        self.applyTransform();\n\n        if (transformXOld !== self.transX || transformYOld !== self.transY) {\n          e.preventDefault();\n        }\n\n        self.isMoving = true;\n\n        if (self.isMovingTimeout) {\n          clearTimeout(self.isMovingTimeout);\n        }\n      }\n\n      touchX = touches[0].pageX;\n      touchY = touches[0].pageY;\n    } else if (touches.length === 2) {\n      if (lastTouchCount === 2) {\n        scale = Math.sqrt(Math.pow(touches[0].pageX - touches[1].pageX, 2) + Math.pow(touches[0].pageY - touches[1].pageY, 2)) / touchStartDistance;\n        self.setScale(touchStartScale * scale, touchCenterX, touchCenterY);\n        e.preventDefault();\n      } else {\n        offset = jQuery(self.container).offset();\n\n        if (touches[0].pageX > touches[1].pageX) {\n          touchCenterX = touches[1].pageX + (touches[0].pageX - touches[1].pageX) / 2;\n        } else {\n          touchCenterX = touches[0].pageX + (touches[1].pageX - touches[0].pageX) / 2;\n        }\n\n        if (touches[0].pageY > touches[1].pageY) {\n          touchCenterY = touches[1].pageY + (touches[0].pageY - touches[1].pageY) / 2;\n        } else {\n          touchCenterY = touches[0].pageY + (touches[1].pageY - touches[0].pageY) / 2;\n        }\n\n        touchCenterX -= offset.left;\n        touchCenterY -= offset.top;\n        touchStartScale = self.scale;\n        touchStartDistance = Math.sqrt(Math.pow(touches[0].pageX - touches[1].pageX, 2) + Math.pow(touches[0].pageY - touches[1].pageY, 2));\n      }\n    }\n\n    lastTouchCount = touches.length;\n  });\n  jQuery(this.container).bind('touchstart', function () {\n    lastTouchCount = 0;\n  });\n  jQuery(this.container).bind('touchend', function () {\n    lastTouchCount = 0;\n  });\n};\n\nJQVMap.prototype.placePins = function (pins, pinMode) {\n  var map = this;\n\n  if (!pinMode || pinMode !== 'content' && pinMode !== 'id') {\n    pinMode = 'content';\n  }\n\n  if (pinMode === 'content') {\n    //treat pin as content\n    jQuery.each(pins, function (index, pin) {\n      if (jQuery('#' + map.getCountryId(index)).length === 0) {\n        return;\n      }\n\n      var pinIndex = map.getPinId(index);\n      var $pin = jQuery('#' + pinIndex);\n\n      if ($pin.length > 0) {\n        $pin.remove();\n      }\n\n      map.container.append('<div id=\"' + pinIndex + '\" for=\"' + index + '\" class=\"jqvmap-pin\" style=\"position:absolute\">' + pin + '</div>');\n    });\n  } else {\n    //treat pin as id of an html content\n    jQuery.each(pins, function (index, pin) {\n      if (jQuery('#' + map.getCountryId(index)).length === 0) {\n        return;\n      }\n\n      var pinIndex = map.getPinId(index);\n      var $pin = jQuery('#' + pinIndex);\n\n      if ($pin.length > 0) {\n        $pin.remove();\n      }\n\n      map.container.append('<div id=\"' + pinIndex + '\" for=\"' + index + '\" class=\"jqvmap-pin\" style=\"position:absolute\"></div>');\n      $pin.append(jQuery('#' + pin));\n    });\n  }\n\n  this.positionPins();\n\n  if (!this.pinHandlers) {\n    this.pinHandlers = true;\n\n    var positionFix = function positionFix() {\n      map.positionPins();\n    };\n\n    this.container.bind('zoomIn', positionFix).bind('zoomOut', positionFix).bind('drag', positionFix);\n  }\n};\n\nJQVMap.prototype.positionPins = function () {\n  var map = this;\n  var pins = this.container.find('.jqvmap-pin');\n  jQuery.each(pins, function (index, pinObj) {\n    pinObj = jQuery(pinObj);\n    var countryId = map.getCountryId(pinObj.attr('for').toLowerCase());\n    var countryObj = jQuery('#' + countryId);\n    var bbox = countryObj[0].getBBox();\n    var scale = map.scale;\n    var rootCoords = map.canvas.rootGroup.getBoundingClientRect();\n    var mapCoords = map.container[0].getBoundingClientRect();\n    var coords = {\n      left: rootCoords.left - mapCoords.left,\n      top: rootCoords.top - mapCoords.top\n    };\n    var middleX = bbox.x * scale + bbox.width * scale / 2;\n    var middleY = bbox.y * scale + bbox.height * scale / 2;\n    pinObj.css({\n      left: coords.left + middleX - pinObj.width() / 2,\n      top: coords.top + middleY - pinObj.height() / 2\n    });\n  });\n};\n\nJQVMap.prototype.removePin = function (cc) {\n  cc = cc.toLowerCase();\n  jQuery('#' + this.getPinId(cc)).remove();\n};\n\nJQVMap.prototype.removePins = function () {\n  this.container.find('.jqvmap-pin').remove();\n};\n\nJQVMap.prototype.reset = function () {\n  for (var key in this.countries) {\n    this.countries[key].setFill(this.color);\n  }\n\n  this.scale = this.baseScale;\n  this.transX = this.baseTransX;\n  this.transY = this.baseTransY;\n  this.applyTransform();\n  this.zoomCurStep = 1;\n};\n\nJQVMap.prototype.resize = function () {\n  var curBaseScale = this.baseScale;\n\n  if (this.width / this.height > this.defaultWidth / this.defaultHeight) {\n    this.baseScale = this.height / this.defaultHeight;\n    this.baseTransX = Math.abs(this.width - this.defaultWidth * this.baseScale) / (2 * this.baseScale);\n  } else {\n    this.baseScale = this.width / this.defaultWidth;\n    this.baseTransY = Math.abs(this.height - this.defaultHeight * this.baseScale) / (2 * this.baseScale);\n  }\n\n  this.scale *= this.baseScale / curBaseScale;\n  this.transX *= this.baseScale / curBaseScale;\n  this.transY *= this.baseScale / curBaseScale;\n};\n\nJQVMap.prototype.select = function (cc, path) {\n  cc = cc.toLowerCase();\n  path = path || jQuery('#' + this.getCountryId(cc))[0];\n\n  if (!this.isSelected(cc)) {\n    if (this.multiSelectRegion) {\n      this.selectedRegions.push(cc);\n    } else {\n      this.selectedRegions = [cc];\n    }\n\n    jQuery(this.container).trigger('regionSelect.jqvmap', [cc]);\n\n    if (this.selectedColor && path) {\n      path.currentFillColor = this.selectedColor;\n      path.setFill(this.selectedColor);\n    }\n  }\n};\n\nJQVMap.prototype.selectIndex = function (cc) {\n  cc = cc.toLowerCase();\n\n  for (var i = 0; i < this.selectedRegions.length; i++) {\n    if (cc === this.selectedRegions[i]) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nJQVMap.prototype.setBackgroundColor = function (backgroundColor) {\n  this.container.css('background-color', backgroundColor);\n};\n\nJQVMap.prototype.setColors = function (key, color) {\n  if (typeof key === 'string') {\n    this.countries[key].setFill(color);\n    this.countries[key].setAttribute('original', color);\n  } else {\n    var colors = key;\n\n    for (var code in colors) {\n      if (this.countries[code]) {\n        this.countries[code].setFill(colors[code]);\n        this.countries[code].setAttribute('original', colors[code]);\n      }\n    }\n  }\n};\n\nJQVMap.prototype.setNormalizeFunction = function (f) {\n  this.colorScale.setNormalizeFunction(f);\n\n  if (this.values) {\n    this.setValues(this.values);\n  }\n};\n\nJQVMap.prototype.setScale = function (scale) {\n  this.scale = scale;\n  this.applyTransform();\n};\n\nJQVMap.prototype.setScaleColors = function (colors) {\n  this.colorScale.setColors(colors);\n\n  if (this.values) {\n    this.setValues(this.values);\n  }\n};\n\nJQVMap.prototype.setValues = function (values) {\n  var max = 0,\n      min = Number.MAX_VALUE,\n      val;\n\n  for (var cc in values) {\n    cc = cc.toLowerCase();\n    val = parseFloat(values[cc]);\n\n    if (isNaN(val)) {\n      continue;\n    }\n\n    if (val > max) {\n      max = values[cc];\n    }\n\n    if (val < min) {\n      min = val;\n    }\n  }\n\n  if (min === max) {\n    max++;\n  }\n\n  this.colorScale.setMin(min);\n  this.colorScale.setMax(max);\n  var colors = {};\n\n  for (cc in values) {\n    cc = cc.toLowerCase();\n    val = parseFloat(values[cc]);\n    colors[cc] = isNaN(val) ? this.color : this.colorScale.getColor(val);\n  }\n\n  this.setColors(colors);\n  this.values = values;\n};\n\nJQVMap.prototype.unhighlight = function (cc, path) {\n  cc = cc.toLowerCase();\n  path = path || jQuery('#' + this.getCountryId(cc))[0];\n  path.setOpacity(1);\n\n  if (path.currentFillColor) {\n    path.setFill(path.currentFillColor);\n  }\n};\n\nJQVMap.prototype.zoomIn = function () {\n  var map = this;\n  var sliderDelta = (jQuery('#zoom').innerHeight() - 6 * 2 - 15 * 2 - 3 * 2 - 7 - 6) / (this.zoomMaxStep - this.zoomCurStep);\n\n  if (map.zoomCurStep < map.zoomMaxStep) {\n    map.transX -= (map.width / map.scale - map.width / (map.scale * map.zoomStep)) / 2;\n    map.transY -= (map.height / map.scale - map.height / (map.scale * map.zoomStep)) / 2;\n    map.setScale(map.scale * map.zoomStep);\n    map.zoomCurStep++;\n    var $slider = jQuery('#zoomSlider');\n    $slider.css('top', parseInt($slider.css('top'), 10) - sliderDelta);\n    map.container.trigger('zoomIn');\n  }\n};\n\nJQVMap.prototype.zoomOut = function () {\n  var map = this;\n  var sliderDelta = (jQuery('#zoom').innerHeight() - 6 * 2 - 15 * 2 - 3 * 2 - 7 - 6) / (this.zoomMaxStep - this.zoomCurStep);\n\n  if (map.zoomCurStep > 1) {\n    map.transX += (map.width / (map.scale / map.zoomStep) - map.width / map.scale) / 2;\n    map.transY += (map.height / (map.scale / map.zoomStep) - map.height / map.scale) / 2;\n    map.setScale(map.scale / map.zoomStep);\n    map.zoomCurStep--;\n    var $slider = jQuery('#zoomSlider');\n    $slider.css('top', parseInt($slider.css('top'), 10) + sliderDelta);\n    map.container.trigger('zoomOut');\n  }\n};\n\nVectorCanvas.prototype.applyTransformParams = function (scale, transX, transY) {\n  if (this.mode === 'svg') {\n    this.rootGroup.setAttribute('transform', 'scale(' + scale + ') translate(' + transX + ', ' + transY + ')');\n  } else {\n    this.rootGroup.coordorigin = this.width - transX + ',' + (this.height - transY);\n    this.rootGroup.coordsize = this.width / scale + ',' + this.height / scale;\n  }\n};\n\nVectorCanvas.prototype.createGroup = function (isRoot) {\n  var node;\n\n  if (this.mode === 'svg') {\n    node = this.createSvgNode('g');\n  } else {\n    node = this.createVmlNode('group');\n    node.style.width = this.width + 'px';\n    node.style.height = this.height + 'px';\n    node.style.left = '0px';\n    node.style.top = '0px';\n    node.coordorigin = '0 0';\n    node.coordsize = this.width + ' ' + this.height;\n  }\n\n  if (isRoot) {\n    this.rootGroup = node;\n  }\n\n  return node;\n};\n\nVectorCanvas.prototype.createPath = function (config) {\n  var node;\n\n  if (this.mode === 'svg') {\n    node = this.createSvgNode('path');\n    node.setAttribute('d', config.path);\n\n    if (this.params.borderColor !== null) {\n      node.setAttribute('stroke', this.params.borderColor);\n    }\n\n    if (this.params.borderWidth > 0) {\n      node.setAttribute('stroke-width', this.params.borderWidth);\n      node.setAttribute('stroke-linecap', 'round');\n      node.setAttribute('stroke-linejoin', 'round');\n    }\n\n    if (this.params.borderOpacity > 0) {\n      node.setAttribute('stroke-opacity', this.params.borderOpacity);\n    }\n\n    node.setFill = function (color) {\n      this.setAttribute('fill', color);\n\n      if (this.getAttribute('original') === null) {\n        this.setAttribute('original', color);\n      }\n    };\n\n    node.getFill = function () {\n      return this.getAttribute('fill');\n    };\n\n    node.getOriginalFill = function () {\n      return this.getAttribute('original');\n    };\n\n    node.setOpacity = function (opacity) {\n      this.setAttribute('fill-opacity', opacity);\n    };\n  } else {\n    node = this.createVmlNode('shape');\n    node.coordorigin = '0 0';\n    node.coordsize = this.width + ' ' + this.height;\n    node.style.width = this.width + 'px';\n    node.style.height = this.height + 'px';\n    node.fillcolor = JQVMap.defaultFillColor;\n    node.stroked = false;\n    node.path = VectorCanvas.pathSvgToVml(config.path);\n    var scale = this.createVmlNode('skew');\n    scale.on = true;\n    scale.matrix = '0.01,0,0,0.01,0,0';\n    scale.offset = '0,0';\n    node.appendChild(scale);\n    var fill = this.createVmlNode('fill');\n    node.appendChild(fill);\n\n    node.setFill = function (color) {\n      this.getElementsByTagName('fill')[0].color = color;\n\n      if (this.getAttribute('original') === null) {\n        this.setAttribute('original', color);\n      }\n    };\n\n    node.getFill = function () {\n      return this.getElementsByTagName('fill')[0].color;\n    };\n\n    node.getOriginalFill = function () {\n      return this.getAttribute('original');\n    };\n\n    node.setOpacity = function (opacity) {\n      this.getElementsByTagName('fill')[0].opacity = parseInt(opacity * 100, 10) + '%';\n    };\n  }\n\n  return node;\n};\n\nVectorCanvas.prototype.pathSvgToVml = function (path) {\n  var result = '';\n  var cx = 0,\n      cy = 0,\n      ctrlx,\n      ctrly;\n  return path.replace(/([MmLlHhVvCcSs])((?:-?(?:\\d+)?(?:\\.\\d+)?,?\\s?)+)/g, function (segment, letter, coords) {\n    coords = coords.replace(/(\\d)-/g, '$1,-').replace(/\\s+/g, ',').split(',');\n\n    if (!coords[0]) {\n      coords.shift();\n    }\n\n    for (var i = 0, l = coords.length; i < l; i++) {\n      coords[i] = Math.round(100 * coords[i]);\n    }\n\n    switch (letter) {\n      case 'm':\n        cx += coords[0];\n        cy += coords[1];\n        result = 't' + coords.join(',');\n        break;\n\n      case 'M':\n        cx = coords[0];\n        cy = coords[1];\n        result = 'm' + coords.join(',');\n        break;\n\n      case 'l':\n        cx += coords[0];\n        cy += coords[1];\n        result = 'r' + coords.join(',');\n        break;\n\n      case 'L':\n        cx = coords[0];\n        cy = coords[1];\n        result = 'l' + coords.join(',');\n        break;\n\n      case 'h':\n        cx += coords[0];\n        result = 'r' + coords[0] + ',0';\n        break;\n\n      case 'H':\n        cx = coords[0];\n        result = 'l' + cx + ',' + cy;\n        break;\n\n      case 'v':\n        cy += coords[0];\n        result = 'r0,' + coords[0];\n        break;\n\n      case 'V':\n        cy = coords[0];\n        result = 'l' + cx + ',' + cy;\n        break;\n\n      case 'c':\n        ctrlx = cx + coords[coords.length - 4];\n        ctrly = cy + coords[coords.length - 3];\n        cx += coords[coords.length - 2];\n        cy += coords[coords.length - 1];\n        result = 'v' + coords.join(',');\n        break;\n\n      case 'C':\n        ctrlx = coords[coords.length - 4];\n        ctrly = coords[coords.length - 3];\n        cx = coords[coords.length - 2];\n        cy = coords[coords.length - 1];\n        result = 'c' + coords.join(',');\n        break;\n\n      case 's':\n        coords.unshift(cy - ctrly);\n        coords.unshift(cx - ctrlx);\n        ctrlx = cx + coords[coords.length - 4];\n        ctrly = cy + coords[coords.length - 3];\n        cx += coords[coords.length - 2];\n        cy += coords[coords.length - 1];\n        result = 'v' + coords.join(',');\n        break;\n\n      case 'S':\n        coords.unshift(cy + cy - ctrly);\n        coords.unshift(cx + cx - ctrlx);\n        ctrlx = coords[coords.length - 4];\n        ctrly = coords[coords.length - 3];\n        cx = coords[coords.length - 2];\n        cy = coords[coords.length - 1];\n        result = 'c' + coords.join(',');\n        break;\n\n      default:\n        break;\n    }\n\n    return result;\n  }).replace(/z/g, '');\n};\n\nVectorCanvas.prototype.setSize = function (width, height) {\n  if (this.mode === 'svg') {\n    this.canvas.setAttribute('width', width);\n    this.canvas.setAttribute('height', height);\n  } else {\n    this.canvas.style.width = width + 'px';\n    this.canvas.style.height = height + 'px';\n    this.canvas.coordsize = width + ' ' + height;\n    this.canvas.coordorigin = '0 0';\n\n    if (this.rootGroup) {\n      var paths = this.rootGroup.getElementsByTagName('shape');\n\n      for (var i = 0, l = paths.length; i < l; i++) {\n        paths[i].coordsize = width + ' ' + height;\n        paths[i].style.width = width + 'px';\n        paths[i].style.height = height + 'px';\n      }\n\n      this.rootGroup.coordsize = width + ' ' + height;\n      this.rootGroup.style.width = width + 'px';\n      this.rootGroup.style.height = height + 'px';\n    }\n  }\n\n  this.width = width;\n  this.height = height;\n};","map":null,"metadata":{},"sourceType":"module"}